'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _findUp = require('find-up');

var _findUp2 = _interopRequireDefault(_findUp);

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _commonTags = require('common-tags');

var _arrify = require('arrify');

var _arrify2 = _interopRequireDefault(_arrify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var parser = _yargs2.default.usage('Usage: $0 <globs>... [--option-1 option-1-value --option-2]').help('h').alias('h', 'help').version().options({
  write: {
    default: false,
    describe: 'Edit the file in-place (beware!)',
    type: 'boolean'
  },
  stdin: { default: false, describe: 'Read input via stdin', type: 'boolean' },
  'eslint-ignore': {
    default: true,
    type: 'boolean',
    describe: _commonTags.oneLine`
        Only format matching files even if
        they are not ignored by .eslintignore.
        (can use --no-eslint-ignore to disable this)
      `
  },
  eslintPath: {
    default: getPathInHostNodeModules('eslint'),
    describe: 'The path to the eslint module to use',
    coerce: coercePath
  },
  prettierPath: {
    describe: 'The path to the prettier module to use',
    default: getPathInHostNodeModules('prettier'),
    coerce: coercePath
  },
  ignore: {
    describe: _commonTags.oneLine`
          pattern(s) you wish to ignore
          (can be used multiple times
          and includes **/node_modules/** automatically)
        `,
    coerce: _arrify2.default
  },
  'log-level': {
    describe: 'The log level to use',
    choices: ['silent', 'error', 'warn', 'info', 'debug', 'trace'],
    alias: 'l',
    default: 'warn'
  },
  'prettier-last': {
    describe: 'Run prettier last',
    default: false,
    type: 'boolean'
  }
}).strict();

exports.default = parser;


function getPathInHostNodeModules(module) {
  var modulePath = _findUp2.default.sync(`node_modules/${module}`);

  if (modulePath) {
    return modulePath;
  }

  return _findUp2.default.sync(`node_modules/${module}`, { cwd: __dirname });
}

function coercePath(input) {
  return _path2.default.isAbsolute(input) ? input : _path2.default.join(process.cwd(), input);
}